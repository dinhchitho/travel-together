version: 0.2
env:
  variables:
    PROJECT_NAME: 'travel-together-frontend-dev-sonarqube'
    SONAR_HOST_URL: 'https://sonar.traveltogether.net'
    SONAR_ACCESS_TOKEN: 'e8c3f8a5508e65f991279681c4c35e649ed24c36'
phases:  
  install:
    runtime-versions:
      java: corretto11      
    commands:
      - java -version
      - echo install_stage_completed
  pre_build:
    commands:
      #-----install sonar scaner-----
      - export BROWSERSLIST_IGNORE_OLD_DATA=true
      - echo install sonar-scanner
      - curl https://repo1.maven.org/maven2/org/sonarsource/scanner/cli/sonar-scanner-cli/4.7.0.2747/sonar-scanner-cli-4.7.0.2747-linux.zip -o sonar-scanner-cli-4.7.0.2747-linux.zip
      - unzip -q sonar-scanner-cli-4.7.0.2747-linux.zip
      - mv sonar-scanner-4.7.0.2747-linux sonar-scanner
      #-----install nodejs 16.14.2-----  
      - n 16.14.2
      #-----install git-----  
      - sudo yum install git -y
  build:
    commands:
      #-----authen git by codecommit credential-----      
      - git config --global credential.helper '!aws codecommit credential-helper $@'
      - git config --global credential.UseHttpPath true
      #-----install package-----
      - npm install
      #-----push to sonarqube project-----
      - echo Scan SonarQube on `date`           
      - | # If trigger by CodePipeline, CODEBUILD_SOURCE_REPO_URL will be empty
        if [ -z "$CODEBUILD_SOURCE_REPO_URL" ]; then 
          result=$(./sonar-scanner/bin/sonar-scanner -Dsonar.host.url="$SONAR_HOST_URL" -Dsonar.login="$SONAR_ACCESS_TOKEN" -Dsonar.sources=$CODEBUILD_SRC_DIR -Dsonar.projectName=$PROJECT_NAME -Dsonar.projectVersion=$CODEBUILD_BUILD_NUMBER -Dsonar.sourceEncoding=UTF-8 -Dsonar.projectKey=$PROJECT_NAME -Dsonar.projectBaseDir=$CODEBUILD_SRC_DIR -Dsonar.branch.name=develop -Dsonar.exclusions='**/node_modules/**','**/sonar-scanner/**') 
        else 
          result=$(./sonar-scanner/bin/sonar-scanner -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_ACCESS_TOKEN -Dsonar.sources=$CODEBUILD_SRC_DIR -Dsonar.projectName=$PROJECT_NAME -Dsonar.projectVersion=$CODEBUILD_BUILD_NUMBER -Dsonar.sourceEncoding=UTF-8 -Dsonar.projectKey=$PROJECT_NAME -Dsonar.projectBaseDir=$CODEBUILD_SRC_DIR -Dsonar.pullrequest.key=$PULL_REQUEST_ID -Dsonar.pullrequest.branch=${CODEBUILD_SOURCE_VERSION#"refs/heads/"} -Dsonar.pullrequest.base=develop -Dsonar.exclusions='**/node_modules/**','**/sonar-scanner/**') 
        fi
      - echo build_stage_completed
  post_build:
    commands:
      - echo Scan SonarQube completed on `date`
      - echo Check Quality Gate
      - sonar_link=$(echo $result | egrep -o "you can browse https://[^, ]+")
      - echo $sonar_link
      - sonar_task_id=$(echo $result | egrep -o "task\?id=[^ ]+" | cut -d'=' -f2)
      - echo $sonar_task_id
      - | # Allow time for SonarQube Background Task to complete
        stat="PENDING";
        while [ "$stat" != "SUCCESS" ]; do
          if [ $stat = "FAILED" ] || [ $stat = "CANCELLED" ];
            then echo "SonarQube task $sonar_task_id failed";
            exit 1;
          fi
          stat=$(curl -u "$SONAR_ACCESS_TOKEN:" $SONAR_HOST_URL/api/ce/task\?id=$sonar_task_id | jq -r '.task.status');
          echo "SonarQube analysis status is $stat";
          sleep 5;
        done
      - sonar_analysis_id=$(curl -u "$SONAR_ACCESS_TOKEN:" $SONAR_HOST_URL/api/ce/task\?id=$sonar_task_id | jq -r '.task.analysisId')
      - quality_status=$(curl -u "$SONAR_ACCESS_TOKEN:" $SONAR_HOST_URL/api/qualitygates/project_status\?analysisId=$sonar_analysis_id | jq -r '.projectStatus.status')
      - echo $quality_status
      - | # If trigger by CodePipeline, CODEBUILD_SOURCE_REPO_URL will be empty
        if [ -z "$CODEBUILD_SOURCE_REPO_URL" ]; then
          if [ "$quality_status" != "OK" ]; then
            CODEBUILD_BUILD_SUCCEEDING=0
          fi
        else
          if [ $quality_status = "ERROR" ]; then
            content=$(echo "SonarQube analysis complete. Quality Gate Failed. To see why, $sonar_link");
          elif [ $quality_status = "OK" ]; then
            content=$(echo "SonarQube analysis complete. Quality Gate Passed. For details, $sonar_link");
            aws codecommit update-pull-request-approval-state --pull-request-id $PULL_REQUEST_ID --approval-state APPROVE --revision-id $REVISION_ID;
          else
            content="An unexpected error occurred while attempting to analyze with SonarQube.";
          fi
          aws codecommit post-comment-for-pull-request --pull-request-id $PULL_REQUEST_ID --repository-name $REPOSITORY_NAME --before-commit-id $DESTINATION_COMMIT --after-commit-id $SOURCE_COMMIT --content "$content"
        fi
      - echo post_build_stage_completed
cache:
  paths:
    - '.sonar/cache/**/*'
    - './node_modules/**/*'